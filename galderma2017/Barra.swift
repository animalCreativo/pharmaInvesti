//
//  Barra.swift
//  PharmaInvesti
//
//  Created by PixelCut on 20-03-17.
//  Copyright Â© 2017 PixelCut. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class Barra : NSObject {

    //// Drawing Methods
    

    public dynamic class func drawProgress(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 1024, height: 465), resizing: ResizingBehavior = .aspectFit, phOk: UIColor = UIColor(red: 0.000, green: 0.816, blue: 0.184, alpha: 1.000), phBad: UIColor = UIColor(red: 0.984, green: 0.051, blue: 0.133, alpha: 1.000), barraColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000), radius: CGFloat = 123, height: CGFloat = 100, width: CGFloat = 800, pbueno: CGFloat = 39, x: CGFloat = 123, y: CGFloat = 123, barraheight: CGFloat = 400, barraWidth: CGFloat = 6) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 1024, height: 465), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 1024, y: resizedFrame.height / 465)



        //// Variable Declarations
        let anchoBueno: CGFloat = width * pbueno / 100.0
        let anchoMalo: CGFloat = width * (100 - pbueno) / 100.0
        let expression = pbueno > 12 ? true : false
        let expression2 = pbueno > 86 ? false : true
        let xmalo: CGFloat = x + anchoBueno - 270 + 2
        let x2: CGFloat = xmalo + 1
        let y2: CGFloat = y - 100

        if (expression) {
            //// Rectangle 2 Drawing
            let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: (x - 1), y: (y + 60), width: anchoBueno, height: height), byRoundingCorners: [.topLeft, .bottomLeft], cornerRadii: CGSize(width: radius, height: radius))
            rectangle2Path.close()
            phOk.setFill()
            rectangle2Path.fill()
        }


        if (expression2) {
            //// Rectangle 3 Drawing
            context.saveGState()
            context.translateBy(x: xmalo, y: (y + 60))

            let rectangle3Path = UIBezierPath(roundedRect: CGRect(x: 272, y: 0, width: anchoMalo, height: height), byRoundingCorners: [.topRight, .bottomRight], cornerRadii: CGSize(width: radius, height: radius))
            rectangle3Path.close()
            phBad.setFill()
            rectangle3Path.fill()

            context.restoreGState()
        }


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: (x2 + 267), y: (y2 + 10), width: barraWidth, height: barraheight))
        barraColor.setFill()
        rectangle4Path.fill()
        
        context.restoreGState()

    }




    @objc(BarraResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
